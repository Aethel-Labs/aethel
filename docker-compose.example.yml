services:
  aethel:
    image: ghcr.io/aethel-labs/aethel:latest
    build:
      context: .
      args:
        - VITE_BOT_API_URL=${BOT_API_URL:-https://aethel.xyz}
        - VITE_STATUS_API_KEY=${STATUS_API_KEY}
        - VITE_FRONTEND_URL=${FRONTEND_URL:-https://aethel.xyz}
        - VITE_DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
        - VITE_STATUS_API_KEY=${STATUS_API_KEY}
        - STATUS_API_KEY=${STATUS_API_KEY}
        - SOURCE_COMMIT=${SOURCE_COMMIT:-development}
    container_name: aethel-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      TOKEN: ${TOKEN}
      CLIENT_ID: ${CLIENT_ID}
      DATABASE_URL: ${DATABASE_URL}
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET}
      STATUS_API_KEY: ${STATUS_API_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SOURCE_COMMIT: ${SOURCE_COMMIT}
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node", "|", "grep", "-v", "grep"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    ports:
      - "2020:2020"
    depends_on:
      - postgres
    networks:
      - aethel_network

  postgres:
    image: postgres:15-alpine
    container_name: aethel-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aethel_network
    ports:
      - "5432:5432"

volumes:
  postgres_data:

networks:
  aethel_network:
    driver: bridge
